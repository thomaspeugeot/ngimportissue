// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"ngimportissue/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Hello_sql sql.NullBool
var dummy_Hello_time time.Duration
var dummy_Hello_sort sort.Float64Slice

// HelloAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model helloAPI
type HelloAPI struct {
	gorm.Model

	models.Hello_WOP

	// encoding of pointers
	HelloPointersEncoding HelloPointersEncoding
}

// HelloPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type HelloPointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// HelloDB describes a hello in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model helloDB
type HelloDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field helloDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	HelloPointersEncoding
}

// HelloDBs arrays helloDBs
// swagger:response helloDBsResponse
type HelloDBs []HelloDB

// HelloDBResponse provides response
// swagger:response helloDBResponse
type HelloDBResponse struct {
	HelloDB
}

// HelloWOP is a Hello without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type HelloWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Hello_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoHelloStruct struct {
	// stores HelloDB according to their gorm ID
	Map_HelloDBID_HelloDB map[uint]*HelloDB

	// stores HelloDB ID according to Hello address
	Map_HelloPtr_HelloDBID map[*models.Hello]uint

	// stores Hello according to their gorm ID
	Map_HelloDBID_HelloPtr map[uint]*models.Hello

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoHello *BackRepoHelloStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoHello.stage
	return
}

func (backRepoHello *BackRepoHelloStruct) GetDB() *gorm.DB {
	return backRepoHello.db
}

// GetHelloDBFromHelloPtr is a handy function to access the back repo instance from the stage instance
func (backRepoHello *BackRepoHelloStruct) GetHelloDBFromHelloPtr(hello *models.Hello) (helloDB *HelloDB) {
	id := backRepoHello.Map_HelloPtr_HelloDBID[hello]
	helloDB = backRepoHello.Map_HelloDBID_HelloDB[id]
	return
}

// BackRepoHello.CommitPhaseOne commits all staged instances of Hello to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHello *BackRepoHelloStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for hello := range stage.Hellos {
		backRepoHello.CommitPhaseOneInstance(hello)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, hello := range backRepoHello.Map_HelloDBID_HelloPtr {
		if _, ok := stage.Hellos[hello]; !ok {
			backRepoHello.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoHello.CommitDeleteInstance commits deletion of Hello to the BackRepo
func (backRepoHello *BackRepoHelloStruct) CommitDeleteInstance(id uint) (Error error) {

	hello := backRepoHello.Map_HelloDBID_HelloPtr[id]

	// hello is not staged anymore, remove helloDB
	helloDB := backRepoHello.Map_HelloDBID_HelloDB[id]
	query := backRepoHello.db.Unscoped().Delete(&helloDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoHello.Map_HelloPtr_HelloDBID, hello)
	delete(backRepoHello.Map_HelloDBID_HelloPtr, id)
	delete(backRepoHello.Map_HelloDBID_HelloDB, id)

	return
}

// BackRepoHello.CommitPhaseOneInstance commits hello staged instances of Hello to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoHello *BackRepoHelloStruct) CommitPhaseOneInstance(hello *models.Hello) (Error error) {

	// check if the hello is not commited yet
	if _, ok := backRepoHello.Map_HelloPtr_HelloDBID[hello]; ok {
		return
	}

	// initiate hello
	var helloDB HelloDB
	helloDB.CopyBasicFieldsFromHello(hello)

	query := backRepoHello.db.Create(&helloDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoHello.Map_HelloPtr_HelloDBID[hello] = helloDB.ID
	backRepoHello.Map_HelloDBID_HelloPtr[helloDB.ID] = hello
	backRepoHello.Map_HelloDBID_HelloDB[helloDB.ID] = &helloDB

	return
}

// BackRepoHello.CommitPhaseTwo commits all staged instances of Hello to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHello *BackRepoHelloStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, hello := range backRepoHello.Map_HelloDBID_HelloPtr {
		backRepoHello.CommitPhaseTwoInstance(backRepo, idx, hello)
	}

	return
}

// BackRepoHello.CommitPhaseTwoInstance commits {{structname }} of models.Hello to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHello *BackRepoHelloStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, hello *models.Hello) (Error error) {

	// fetch matching helloDB
	if helloDB, ok := backRepoHello.Map_HelloDBID_HelloDB[idx]; ok {

		helloDB.CopyBasicFieldsFromHello(hello)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoHello.db.Save(&helloDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Hello intance %s", hello.Name))
		return err
	}

	return
}

// BackRepoHello.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoHello *BackRepoHelloStruct) CheckoutPhaseOne() (Error error) {

	helloDBArray := make([]HelloDB, 0)
	query := backRepoHello.db.Find(&helloDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	helloInstancesToBeRemovedFromTheStage := make(map[*models.Hello]any)
	for key, value := range backRepoHello.stage.Hellos {
		helloInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, helloDB := range helloDBArray {
		backRepoHello.CheckoutPhaseOneInstance(&helloDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		hello, ok := backRepoHello.Map_HelloDBID_HelloPtr[helloDB.ID]
		if ok {
			delete(helloInstancesToBeRemovedFromTheStage, hello)
		}
	}

	// remove from stage and back repo's 3 maps all hellos that are not in the checkout
	for hello := range helloInstancesToBeRemovedFromTheStage {
		hello.Unstage(backRepoHello.GetStage())

		// remove instance from the back repo 3 maps
		helloID := backRepoHello.Map_HelloPtr_HelloDBID[hello]
		delete(backRepoHello.Map_HelloPtr_HelloDBID, hello)
		delete(backRepoHello.Map_HelloDBID_HelloDB, helloID)
		delete(backRepoHello.Map_HelloDBID_HelloPtr, helloID)
	}

	return
}

// CheckoutPhaseOneInstance takes a helloDB that has been found in the DB, updates the backRepo and stages the
// models version of the helloDB
func (backRepoHello *BackRepoHelloStruct) CheckoutPhaseOneInstance(helloDB *HelloDB) (Error error) {

	hello, ok := backRepoHello.Map_HelloDBID_HelloPtr[helloDB.ID]
	if !ok {
		hello = new(models.Hello)

		backRepoHello.Map_HelloDBID_HelloPtr[helloDB.ID] = hello
		backRepoHello.Map_HelloPtr_HelloDBID[hello] = helloDB.ID

		// append model store with the new element
		hello.Name = helloDB.Name_Data.String
		hello.Stage(backRepoHello.GetStage())
	}
	helloDB.CopyBasicFieldsToHello(hello)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	hello.Stage(backRepoHello.GetStage())

	// preserve pointer to helloDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_HelloDBID_HelloDB)[helloDB hold variable pointers
	helloDB_Data := *helloDB
	preservedPtrToHello := &helloDB_Data
	backRepoHello.Map_HelloDBID_HelloDB[helloDB.ID] = preservedPtrToHello

	return
}

// BackRepoHello.CheckoutPhaseTwo Checkouts all staged instances of Hello to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHello *BackRepoHelloStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, helloDB := range backRepoHello.Map_HelloDBID_HelloDB {
		backRepoHello.CheckoutPhaseTwoInstance(backRepo, helloDB)
	}
	return
}

// BackRepoHello.CheckoutPhaseTwoInstance Checkouts staged instances of Hello to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHello *BackRepoHelloStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, helloDB *HelloDB) (Error error) {

	hello := backRepoHello.Map_HelloDBID_HelloPtr[helloDB.ID]

	helloDB.DecodePointers(backRepo, hello)

	return
}

func (helloDB *HelloDB) DecodePointers(backRepo *BackRepoStruct, hello *models.Hello) {

	// insertion point for checkout of pointer encoding
	return
}

// CommitHello allows commit of a single hello (if already staged)
func (backRepo *BackRepoStruct) CommitHello(hello *models.Hello) {
	backRepo.BackRepoHello.CommitPhaseOneInstance(hello)
	if id, ok := backRepo.BackRepoHello.Map_HelloPtr_HelloDBID[hello]; ok {
		backRepo.BackRepoHello.CommitPhaseTwoInstance(backRepo, id, hello)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitHello allows checkout of a single hello (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutHello(hello *models.Hello) {
	// check if the hello is staged
	if _, ok := backRepo.BackRepoHello.Map_HelloPtr_HelloDBID[hello]; ok {

		if id, ok := backRepo.BackRepoHello.Map_HelloPtr_HelloDBID[hello]; ok {
			var helloDB HelloDB
			helloDB.ID = id

			if err := backRepo.BackRepoHello.db.First(&helloDB, id).Error; err != nil {
				log.Fatalln("CheckoutHello : Problem with getting object with id:", id)
			}
			backRepo.BackRepoHello.CheckoutPhaseOneInstance(&helloDB)
			backRepo.BackRepoHello.CheckoutPhaseTwoInstance(backRepo, &helloDB)
		}
	}
}

// CopyBasicFieldsFromHello
func (helloDB *HelloDB) CopyBasicFieldsFromHello(hello *models.Hello) {
	// insertion point for fields commit

	helloDB.Name_Data.String = hello.Name
	helloDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHello_WOP
func (helloDB *HelloDB) CopyBasicFieldsFromHello_WOP(hello *models.Hello_WOP) {
	// insertion point for fields commit

	helloDB.Name_Data.String = hello.Name
	helloDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromHelloWOP
func (helloDB *HelloDB) CopyBasicFieldsFromHelloWOP(hello *HelloWOP) {
	// insertion point for fields commit

	helloDB.Name_Data.String = hello.Name
	helloDB.Name_Data.Valid = true
}

// CopyBasicFieldsToHello
func (helloDB *HelloDB) CopyBasicFieldsToHello(hello *models.Hello) {
	// insertion point for checkout of basic fields (back repo to stage)
	hello.Name = helloDB.Name_Data.String
}

// CopyBasicFieldsToHello_WOP
func (helloDB *HelloDB) CopyBasicFieldsToHello_WOP(hello *models.Hello_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	hello.Name = helloDB.Name_Data.String
}

// CopyBasicFieldsToHelloWOP
func (helloDB *HelloDB) CopyBasicFieldsToHelloWOP(hello *HelloWOP) {
	hello.ID = int(helloDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	hello.Name = helloDB.Name_Data.String
}

// Backup generates a json file from a slice of all HelloDB instances in the backrepo
func (backRepoHello *BackRepoHelloStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "HelloDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HelloDB, 0)
	for _, helloDB := range backRepoHello.Map_HelloDBID_HelloDB {
		forBackup = append(forBackup, helloDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Hello ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Hello file", err.Error())
	}
}

// Backup generates a json file from a slice of all HelloDB instances in the backrepo
func (backRepoHello *BackRepoHelloStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*HelloDB, 0)
	for _, helloDB := range backRepoHello.Map_HelloDBID_HelloDB {
		forBackup = append(forBackup, helloDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Hello")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Hello_Fields, -1)
	for _, helloDB := range forBackup {

		var helloWOP HelloWOP
		helloDB.CopyBasicFieldsToHelloWOP(&helloWOP)

		row := sh.AddRow()
		row.WriteStruct(&helloWOP, -1)
	}
}

// RestoreXL from the "Hello" sheet all HelloDB instances
func (backRepoHello *BackRepoHelloStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoHelloid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Hello"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoHello.rowVisitorHello)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoHello *BackRepoHelloStruct) rowVisitorHello(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var helloWOP HelloWOP
		row.ReadStruct(&helloWOP)

		// add the unmarshalled struct to the stage
		helloDB := new(HelloDB)
		helloDB.CopyBasicFieldsFromHelloWOP(&helloWOP)

		helloDB_ID_atBackupTime := helloDB.ID
		helloDB.ID = 0
		query := backRepoHello.db.Create(helloDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHello.Map_HelloDBID_HelloDB[helloDB.ID] = helloDB
		BackRepoHelloid_atBckpTime_newID[helloDB_ID_atBackupTime] = helloDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "HelloDB.json" in dirPath that stores an array
// of HelloDB and stores it in the database
// the map BackRepoHelloid_atBckpTime_newID is updated accordingly
func (backRepoHello *BackRepoHelloStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoHelloid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "HelloDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Hello file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*HelloDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_HelloDBID_HelloDB
	for _, helloDB := range forRestore {

		helloDB_ID_atBackupTime := helloDB.ID
		helloDB.ID = 0
		query := backRepoHello.db.Create(helloDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoHello.Map_HelloDBID_HelloDB[helloDB.ID] = helloDB
		BackRepoHelloid_atBckpTime_newID[helloDB_ID_atBackupTime] = helloDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Hello file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Hello>id_atBckpTime_newID
// to compute new index
func (backRepoHello *BackRepoHelloStruct) RestorePhaseTwo() {

	for _, helloDB := range backRepoHello.Map_HelloDBID_HelloDB {

		// next line of code is to avert unused variable compilation error
		_ = helloDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoHello.db.Model(helloDB).Updates(*helloDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoHello.ResetReversePointers commits all staged instances of Hello to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoHello *BackRepoHelloStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, hello := range backRepoHello.Map_HelloDBID_HelloPtr {
		backRepoHello.ResetReversePointersInstance(backRepo, idx, hello)
	}

	return
}

func (backRepoHello *BackRepoHelloStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, hello *models.Hello) (Error error) {

	// fetch matching helloDB
	if helloDB, ok := backRepoHello.Map_HelloDBID_HelloDB[idx]; ok {
		_ = helloDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoHelloid_atBckpTime_newID map[uint]uint
